v =matrix(c(1,2,3),nrow=3,ncol = 1)
v
w =matrix(c(4,5,6),nrow = 3,ncol = 1)
w
scalar=t(v)%*%w
scalar
m= matrix(c(1,4,3,2),nrow = 2,ncol = 2,byrow = T)
m
n=matrix(c(5,3,1,7),nrow = 2,ncol = 2,byrow = T)
n
sum=M+N
sum =m+n
sum
V=matrix(c(-4,1,7),nrow = 3,ncol = 1)
v
V
V=matrix(c(-4,1,7),nrow = 3,ncol = 1)
> v
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
w=matrix(c(0,4,20),nrow = 3,ncol = 1)
scalar= t(v)%*%w
scalar
b=-3*w
b
m=matrix(c(8,3,0,21,42,3,0,34,11),nrow = 3,ncol = 3)
m
m=matrix(c(8,21,0,3,42,34,0,3,11),nrow = 3,ncol = 3)
m
m=matrix(c(8,21,0,3,42,34,0,3,11),nrow = 3,ncol = 3)
M=matrix(c(8,21,0,3,42,34,0,3,11),nrow = 3,ncol = 3)
N=matrix(c(-6,0,5,-3,2,1,0,7,-8),nrow = 3,ncol = 3)
N
N=matrix(c(-6,0,5,-3,2,1,0,7,-8),nrow = 3,ncol = 3,byrow = T)
N
N=matrix(c(-6,-3,0,0,2,7,5,1,-8),nrow = 3,ncol = 3,byrow = T)
N
M=matrix(c(8,3,0,21,42,3,0,34,11),nrow = 3,ncol = 3,byrow = T)
M
c=M*V
c=M*v
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
v
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
w= matrix(c(0,4,20),nrow = 3,ncol = 1)
w
w= matrix(c(0,4,20),nrow = 3,ncol = 1)
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
scalar=t(v)%*%w
scalar
ans_b=-3*w
ans_b
M= matrix(c(8,21,0,3,42,34,0,3,11),nrow = 3,ncol = 3,byrow = T)
M
M= matrix(c(8,3,0,21,42,3,0,34,11),nrow = 3,ncol = 3,byrow = T)
M
ans_c=M%*%v
ans_c
N= matrix(c(-6,-3,0,02,7,5,1,-8),nrow = 3,ncol = 3,byrow = T)
N= matrix(c(-6,-3,0,0,2,7,5,1,-8),nrow = 3,ncol = 3,byrow = T)
N
ans_d=M+N
ans_d
ans_e=M-N
ans_e
N= matrix(c(1,-1,1,6,1,-2,1,0),nrow = 4,ncol = 2,byrow = T)
Z= matrix(c(1,-1,1,6,1,-2,1,0),nrow = 4,ncol = 2,byrow = T)
Z
ans_f=t(Z)%*%Z
ans_f
Y= matrix(c(0,9,0,1),nrow = 4,ncol = 1,byrow = T)
ans_h=t(z)%*%y
ans_h=t(Z)%*%Y
ans_h
ans_j=det(ans_f)
ans_j
Y= matrix(c(0,9,0,1),nrow = 4,ncol = 1,byrow = T)
Y
library(foreign)  # Allows us to read spss files!
library(corrplot)
library(car)
library(QuantPsyc)
library(leaps)
library(Hmisc) #Describe Function
library(psych) #Multiple Functions for Statistics and Multivariate Analysis
library(GGally) #ggpairs Function
library(ggplot2) #ggplot2 Functions
library(vioplot) #Violin Plot Function
library(corrplot) #Plot Correlations
library(DescTools) #VIF Function
setwd("~/Dsc-324/assigment-2-dsc324")
training_values <- read.csv(file="ECR data.csv", header=TRUE, sep=",")
dim(training_values)
head(training_values)
sum(is.na(training_values))
str(training_values)
KMO(training_values)
library(REdaS)
bart_spher(training_values)
library(psych)
library(REdaS)
install.packages(c("haven", "highr", "later", "tibble", "viridis", "withr"))
library(leaps) #Best Set Linear Regression Functions
library(REdaS) #Bartlett's Test of Sphericity
library(psych) #PCA/FA functions
library(factoextra) #PCA Visualizations
library("FactoMineR") #PCA functions
library(ade4) #PCA Visualizations
library(REdaS)
bart_spher(training_values)
alpha(training_values,check.keys=TRUE)
KMO(training_values)
library(psych)
alpha(training_values,check.keys=TRUE)
#Test KMO Sampling Adequacy
KMO(training_values)
#Test Bartlett's Test of Sphericity
library(REdaS)
bart_spher(training_values)
library(psych)
alpha(training_values,check.keys=TRUE)
alpha(training_values)
p = prcomp(training_values, center=T, scale=T)
p
#Check Scree Plot
plot(p)
abline(1, 0)
training = prcomp(training_values, center=T, scale=T)
training
#Check Scree Plot
plot(training)
abline(1, 0)
training_p = prcomp(training_values, center=T, scale=T)
training_p
#Check Scree Plot
plot(training_p)
abline(1, 0)
training_p2 = psych::principal(training_values, rotate="varimax", nfactors=6, scores=TRUE)
training_p2
print(training_p2$loadings, cutoff=.4, sort=T)
training_p2 = psych::principal(training_values, rotate="varimax", nfactors=5, scores=TRUE)
training_p2
print(training_p2$loadings, cutoff=.4, sort=T)
training_p2$values
training_p2$communality
training_p2$rot.mat
summary(scores_2)
scores_2 <- scores[,1]
summary(scores_2)
scores <- training_p2$scores
scores_2 <- scores[,1]
summary(scores_2)
scores_1 <- scores[,1]
summary(scores_1)
scores_2 <- scores[,2]
summary(scores_2)
scores_3 <- scores[,3]
summary(scores_3)
scores_4 <- scores[,4]
summary(scores_4)
scores_5 <- scores[,5]
summary(scores_5)
training_fit = factanal(training_values, 5)
print(fit$loadings, cutoff=.4, sort=T)
summary(training_fit)
training_fit = factanal(training_values, 5)
print(training_fit$loadings, cutoff=.4, sort=T)
summary(training_fit)
training_p
training_p = prcomp(training_values, center=T, scale=T)
training_p
training_p1 = prcomp(training_values, center=T, scale=T)
training_p1
plot(training_p)
abline(1, 0)
plot(training_p)
abline(1, 0)
training_p2 = psych::principal(training_values, rotate="varimax", nfactors=5, scores=TRUE)
training_p2
training_p2 = psych::principal(training_values, rotate="varimax", nfactors=5, scores=TRUE)
training_p2
print(training_p2$loadings, cutoff=.4, sort=T)
training_fit = factanal(training_values, 5)
print(training_fit$loadings, cutoff=.4, sort=T)
summary(training_fit)
training_p2$rot.mat
training_p2$communality
training_p2$values
scores <- training_p2$scores
scores_1 <- scores[,1]
summary(scores_1)
scores_2 <- scores[,2]
summary(scores_2)
scores_3 <- scores[,3]
summary(scores_3)
scores_4 <- scores[,4]
summary(scores_4)
scores_5 <- scores[,5]
summary(scores_5)
