dim(training_Values)
names(training_Values)
names(training_values)
dim(training_values)
dim(training_values)
training_values <- read.csv(file="insurance_dataset.csv", header=TRUE, sep=",")
ibrary(Hmisc) #Describe Function
library(psych) #Multiple Functions for Statistics and Multivariate Analysis
library(GGally) #ggpairs Function
library(ggplot2) #ggplot2 Functions
library(vioplot) #Violin Plot Function
library(corrplot) #Plot Correlations
library(DescTools) #VIF Function
library(leaps) #Best Set Linear Regression Functions
training_values <- read.csv(file="insurance_dataset.csv", header=TRUE, sep=",")
dim(training_values)
setwd("~/Dsc-324")
training_values <- read.csv(file="insurance_dataset.csv", header=TRUE, sep=",")
dim(training_values)
head(training_values)
summary(training_values)
cor(training_values)
head(training_values)
View(training_values)
View(training_values)
View(training_values)
View(training_values)
installed.package(deplyr)
install.package(deplyr)
install.packages(deplyr)
install.packages(dplyr)
library(dplyr)
df <- training_values
select(df, -c(1))
df <- training_values
select(df, -c(2))
df <- training_values
df2 <- select(df, -c(2,7,8))
head(df2)
df <- training_values
df2 <- select(df, -c(2,6,8))
head(df2)
View(df2)
View(df2)
cor(df2)
M<-cor(df2, method="spearman")
M
corrplot(M, method = "square")
View(M)
head(df2)
M<-cor(df2, method="spearman")
M
corrplot(M, method = "square")
library(corrplot)
library(RColorBrewer)
data <-cor(df2)
corrplot(data, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
corrplot(data, type="lower", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
corrplot(data, type="lower", order="hclust",
col=brewer.pal(n=5, name="RdYlBu"))
corrplot(data, type="lower", order="hclust",
col=brewer.pal(n=1, name="RdYlBu"))
corrplot(data, type="lower", order="hclust",
col=brewer.pal(n=9, name="RdYlBu"))
corrplot(data, type="lower", order="original",
col=brewer.pal(n=9, name="RdYlBu"))
corrplot(data, type="lower", order="original",
col=brewer.pal(n=9))
data
hist(dataset$expenses)
hist(df2$expenses)
hist(log(df2$expenses))
hist(df2$age)
hist(df2$bmi)
hist(df2$children)
log_+expenses <- log(df2$expenses)
log_expenses <- log(df2$expenses)
head(log_expenses)
df2 <- cbind(df2,log_expenses)
View(df2)
df2$expenses <- NULL
View(df2)
View(df2)
M<-cor(df2, method="spearman")
M
corrplot(M, method = "square")
corrplot(M, method = "cricle")
M<-cor(df2, method="spearman")
M
corrplot(M, method = "circle")
setwd("~/Dsc-324")
head(training_values)
dim(training_values)
setwd("~/Dsc-324")
head(training_values)
str(training_values)
names(training)
names(training_values)
sum(is.na(training_values))
describe(training_values)
describe(training_values)
library(psych)
describe(training_values)
head(training_dataset2)
head(training_dataset2)
str(training_dataset2)
str(training_dataset2)
training_dataset2 <- training_values[,c(1,3:5,7,9,10)]
str(training_dataset2)
head(training_dataset2)
training_cor
library(corrplot)
training_cor
corrplot(training_cor, method = "circle")
library(dplyr)
training_cor<-cor(training_dataset2, method="spearman")
training_cor
corrplot(training_cor, method = "circle")
training_cor<-cor(training_dataset2, method="spearman")
training_cor
corrplot(training_cor, method = "circle")
ggcorr(training_cor)
library(ggplot2)
ggcorr(training_cor)
training_cor<-cor(training_dataset2, method="spearman")
training_cor
corrplot(training_cor, method = "circle")
ggcorr(training_cor)
VIF(model1)
model1 <- lm( expenses~ ., data=training_dataset2)
VIF(model1)
model1 <- lm( expenses~ ., data=training_dataset2)
model1
VIF(model1)
library(DescTools)
VIF(model1)
null = lm(heart_disease_mortality_per_100k ~ 1, data=training_dataset2)
null
full = lm(heart_disease_mortality_per_100k ~ ., data=training_dataset2)
full
library(Hmisc) #Describe Function
library(psych) #Multiple Functions for Statistics and Multivariate Analysis
library(GGally) #ggpairs Function
library(ggplot2) #ggplot2 Functions
library(vioplot) #Violin Plot Function
library(corrplot) #Plot Correlations
library(DescTools) #VIF Function
library(leaps)
null = lm(heart_disease_mortality_per_100k ~ 1, data=training_dataset2)
null
full = lm(heart_disease_mortality_per_100k ~ ., data=training_dataset2)
full
ibrary(leaps)
library(leaps)
null = lm(heart_disease_mortality_per_100k ~ 1, data=training_dataset2)
null
full = lm(heart_disease_mortality_per_100k ~ ., data=training_dataset2)
full
model1 <- lm( expenses~ ., data=training_dataset2)
model1
VIF(model1)
null = lm(heart_disease_mortality_per_100k ~ 1, data=training_dataset2)
nul
null = lm( expenses~ 1, data=training_dataset2)
null
full = lm(expenses ~ ., data=training_dataset2)
full
train_Forward = step(null, scope = list(lower=null, upper=full), direction="forward")
summary(train_Forward)
train_Backward = step(full, direction="backward")
summary(train_Backward)
train_Step = step(null, scope = list(upper=full), direction="both")
summmary(train_Step)
train_Step = step(null, scope = list(upper=full), direction="both")
summary(train_Step)
#look a size of dataset by row and col
dim(training_values)
# look a data is  a num or category
str(training_values)
# looking a datasets table /Show for first 6 rows of data
head(training_values)
# Check for Missing Values
sum(is.na(training_values))
#Create new subsets of data
library(psych)
training_dataset2 <- training_values[,c(1,3:5,7,9,10)]
str(training_dataset2)
training_cor<-cor(training_dataset2, method="spearman")
training_cor
corrplot(training_cor, method = "circle")
model1 <- lm( expenses~ ., data=training_dataset2)
model1
library(DescTools)
VIF(model1)
#Forward Regression
train_Forward = step(null, scope = list(lower=null, upper=full), direction="forward")
summary(train_Forward)
#Backward Regression
train_Backward = step(full, direction="backward")
summary(train_Backward)
#Stepwise Regression
train_Step = step(null, scope = list(upper=full), direction="both")
summary(train_Step)
boxplot(training_dataset2$expenses, col = "blue", main="expenses",
ylab="expenses" )
summary(training_dataset2$expenses)
ggboxplot<-ggplot(training_dataset2, aes(y=expenses)) +
geom_boxplot(col="blue") +
labs(
title="expenses",
y="expenses(100K)")
ggboxplot
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
v
M= matrix(c(8,3,0,21,42,3,0,34,11),nrow = 3,ncol = 3,byrow = T)
M
ans_c=M%*%v
ans_c
B= ans_g%*%ans_h
B
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
v
w= matrix(c(0,4,20),nrow = 3,ncol = 1)
w
scalar=t(v)%*%w
scalar
#---------------B-------------------------
w= matrix(c(0,4,20),nrow = 3,ncol = 1)
w
ans_b=-3*w
ans_b
#-------------C----------------------------
M= matrix(c(8,3,0,21,42,3,0,34,11),nrow = 3,ncol = 3,byrow = T)
M
ans_c=M%*%v
ans_c
#----------------D------------------------
N= matrix(c(-6,-3,0,0,2,7,5,1,-8),nrow = 3,ncol = 3,byrow = T)
N
ans_d=M+N
ans_d
#---------------E-----------------------
ans_e=M-N
ans_e
#-------------F----------------------------
Z= matrix(c(1,-1,1,6,1,-2,1,0),nrow = 4,ncol = 2,byrow = T)
Z
ans_f=t(Z)%*%Z
ans_f
#--------------G------------------------
ans_g=solve(ans_f)
ans_f
#------------------H-----------------------
Y= matrix(c(0,9,0,1),nrow = 4,ncol = 1,byrow = T)
Y
ans_h=t(Z)%*%Y
ans_h
#----------------------I-----------------
B= ans_g%*%ans_h
B
#------------------J-------------------
ans_j=det(ans_f)
ans_j
ans_g=solve(ans_f)
ans_g
Y= matrix(c(0,9,0,1),nrow = 4,ncol = 1,byrow = T)
Y
ans_h=t(Z)%*%Y
ans_h
B= ans_g%*%ans_h
B
v= matrix(c(-4,1,7),nrow = 3,ncol = 1)
v
w= matrix(c(0,4,20),nrow = 3,ncol = 1)
w
scalar=t(v)%*%w
scalar
#---------------B-------------------------
w= matrix(c(0,4,20),nrow = 3,ncol = 1)
w
ans_b=-3*w
ans_b
#-------------C----------------------------
M= matrix(c(8,3,0,21,42,3,0,34,11),nrow = 3,ncol = 3,byrow = T)
M
ans_c=M%*%v
ans_c
#----------------D------------------------
N= matrix(c(-6,-3,0,0,2,7,5,1,-8),nrow = 3,ncol = 3,byrow = T)
N
ans_d=M+N
ans_d
#---------------E-----------------------
ans_e=M-N
ans_e
#-------------F----------------------------
Z= matrix(c(1,-1,1,6,1,-2,1,0),nrow = 4,ncol = 2,byrow = T)
Z
ans_f=t(Z)%*%Z
ans_f
#--------------G------------------------
ans_g=solve(ans_f)
ans_g
#------------------H-----------------------
Y= matrix(c(0,9,0,1),nrow = 4,ncol = 1,byrow = T)
Y
ans_h=t(Z)%*%Y
ans_h
#----------------------I-----------------
B= ans_g%*%ans_h
B
#------------------J-------------------
ans_j=det(ans_f)
ans_j
